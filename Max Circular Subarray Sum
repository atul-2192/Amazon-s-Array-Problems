Given a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums.

A circular array means the end of the array connects to the beginning of the array. Formally, the next element of nums[i] is nums[(i + 1) % n] 
and the previous element of nums[i] is nums[(i - 1 + n) % n].

A subarray may only include each element of the fixed buffer nums at most once. 
Formally, for a subarray nums[i], nums[i + 1], ..., nums[j], 
there does not exist i <= k1, k2 <= j with k1 % n == k2 % n.



    int maxSubarraySumCircular(vector<int>& nums) {
        int n=nums.size();
        int sum=nums[0];
        int summin=nums[0],ansmin=nums[0],summax=nums[0],ansmax=nums[0];
        for(int i=1;i<n;i++)
        {
            sum+=nums[i];
            summin=min(nums[i],summin+nums[i]);
            ansmin=min(ansmin,summin);
            
            summax=max(nums[i],summax+nums[i]);
            ansmax=max(ansmax,summax);
        }
        return ansmax>0?max(ansmax,sum-ansmin):ansmax;
    }
